// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactionService.Infrastructure.Data;

#nullable disable

namespace TransactionService.Infrastructure.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20250630084250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransactionService.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TransactionService.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Transactions_ClientId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TransactionService.Domain.Entities.CreditTransaction", b =>
                {
                    b.HasBaseType("TransactionService.Domain.Entities.Transaction");

                    b.HasDiscriminator().HasValue("Credit");
                });

            modelBuilder.Entity("TransactionService.Domain.Entities.DebitTransaction", b =>
                {
                    b.HasBaseType("TransactionService.Domain.Entities.Transaction");

                    b.HasDiscriminator().HasValue("Debit");
                });

            modelBuilder.Entity("TransactionService.Domain.Entities.RevertTransaction", b =>
                {
                    b.HasBaseType("TransactionService.Domain.Entities.Transaction");

                    b.Property<Guid?>("RevertedTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RevertedTransactionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RevertTransactions_RevertedTransactionId")
                        .HasFilter("[RevertedTransactionId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Revert");
                });

            modelBuilder.Entity("TransactionService.Domain.Entities.RevertTransaction", b =>
                {
                    b.HasOne("TransactionService.Domain.Entities.Transaction", null)
                        .WithMany()
                        .HasForeignKey("RevertedTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
